用法：
    observable(value)
    @observable classProperty = value
    值：JS基本数据类型、引用类型、普通对象、类实例、数组和映
    value 是ES6的 Map : 会返回一个新的 Observable Map。如果你不只关注某个特定entry的更改，而且对添加或删除其他entry时也做出反应的话，那么 Observable maps 会非常有用
    value 是数组，会返回一个 Observable Array。
    value 是没有原型的对象，那么对象会被克隆并且所有的属性都会被转换成可观察的。参见 Observable Object。
    value 是有原型的对象，JavaSript原始数据类型或者函数，会返回一个 Boxed Observable。MobX 不会将一个有原型的对象自动转换成可观察的，因为这是它构造函数的职责。在构造函数中使用 extendObservable 或者在类定义中使用 @observable。
    const map = observable.map({ key: "value"});// 键是动态的对象 时使用 Observable Map
    map.set("key", "new value");

    const list = observable([1, 2, 4]);
    list[2] = 3;

    const person = observable({
        firstName: "Clive Staples",
        lastName: "Lewis"
    });
    person.firstName = "C.S.";

    const temperature = observable(20);
    temperature.set(25);
@observable:
    装饰器可以在 ES7 或者 TypeScript 类属性中属性使用，
    @observable 可以在实例字段和属性 getter 上使用。 
    import { observable, computed } from "mobx";

    class OrderLine {
        @observable price = 0;
        @observable amount = 1;

        @computed get total() {
            return this.price * this.amount;
        }
    }
    所有的属性都是惰性定义的，
    直到它们中任何一个属性被访问。
    在此之前，它们只是定义在类的原型上。
    value in object + hasOwnProperty是判断属性是否是在对象的原型上的方案
    const line = new OrderLine();
    console.log("price" in line); // true
    // hasOwnProperty：是用来判断一个对象是否有你给出名称的属性或对象。不过需要注意的是，此方法无法检查该对象的原型链中是否具有该属性，该属性必须是对象本身的一个成员。
    console.log(line.hasOwnProperty("price")); // false，price 属性是定义在类上的，尽管值会被存储在每个实例上。
    line.amount = 2;
    console.log(line.hasOwnProperty("price")); // true, 现在所有的属性都定义在实例上了。

在编译器中启用装饰器：

在使用 TypeScript 或 Babel 这些等待ES标准定义的编译器时，默认情况下是不支持装饰器的。

对于 typescript，启用 --experimentalDecorators 编译器标识或者在 tsconfig.json 中把编译器属性 experimentalDecorators 设置为 true (推荐做法)
对于 babel5，确保把 --stage 0 传递给 Babel CLI
对于 babel6，参见此 issue 中建议的示例配置。