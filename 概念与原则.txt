1. State(状态)
    状态是驱动应用的数据。 
    通常有像待办事项列表这样的领域特定状态，还有像当前已选元素的视图状态。 状态就像是有数据的excel表格。
2. Derivations(衍生)

    源自状态并且不会再有任何进一步的相互作用,的东西就是衍生。 
    衍生存在形式:
        形式用户界面
        衍生数据，比如剩下的待办事项的数量。
        后端集成，比如把变化发送到服务器端。
    MobX 区分了两种类型的衍生:
        Computed values(计算值) - 它们是永远可以使用纯函数(pure function)从当前可观察状态中衍生出的值。
        Reactions(反应) - Reactions 是当状态改变时需要自动发生作用。
            需要有一个桥梁来连接命令式编程(imperative programming)和响应式编程(reactive programming)。
            或者说得更明确一些，它们最终都需要实现I / O 操作。
        reactions,computed的黄金使用法则: 如果你想创建一个基于当前状态的值时，使用 computed。

        回到excel表格这个比喻中来，公式是计算值的衍生。但对于用户来说，能看到屏幕给出的反应则需要部分重绘GUI。
3. Actions(动作)
    动作是段可以改变状态的代码。用户事件、后端数据推送、预定事件、等等。 
    动作类似于用户在excel单元格中输入一个新的值。
    如果是在严格模式下使用 MobX的话，MobX 会强制只有在动作之中才可以修改状态。

原则:

MobX 支持单向数据流，也就是动作改变状态，而状态的改变会更新所有依赖状态的视图。

Action=>State=>View

当状态改变时，所有衍生都会进行原子级的自动更新。因此永远不可能观察到中间值。

所有衍生默认都是同步更新。这意味着例如动作可以在改变状态之后直接可以安全地检查计算值。
**********
计算值 是延迟更新的。任何不在使用状态的计算值将不会更新，直到需要它进行副作用（I / O）操作时。 如果视图不再使用，那么它会自动被垃圾回收。

所有的计算值都应该是纯净的。它们不应该用来改变状态。